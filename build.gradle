plugins {
    id 'java'
    id 'pmd'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.5.1'
    id 'com.github.spotbugs' version '5.0.6'
    id 'io.freefair.lombok' version '6.4.3'
    id 'org.springframework.boot' version '2.6.7'
    id 'com.bmuschko.docker-spring-boot-application' version '7.3.0'
    id 'com.asarkar.gradle.build-time-tracker' version '4.2.0'
}

group = 'co.uk.stefanpuia'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}


dependencies {
    annotationProcessor libs.immutables.value
    annotationProcessor libs.lombok.mapstruct.binding
    annotationProcessor libs.mapstruct.processor
    annotationProcessor libs.mapstruct.spring.processor
    annotationProcessor libs.spring.boot.configuration.processor
    developmentOnly libs.spring.boot.devtools
    implementation libs.bundles.immutables
    implementation libs.commons.lang3
    implementation libs.mapstruct.core
    implementation libs.mapstruct.spring.core
    implementation libs.slf4j.api
    implementation libs.spotbugs.annotations
    implementation libs.spring.boot.starter.data.jpa
    implementation libs.spring.boot.starter.freemarker
    implementation libs.spring.boot.starter.validation
    implementation libs.spring.boot.starter.web
    testImplementation libs.assertj.core
    testImplementation libs.bundles.junit.jupiter
    testImplementation libs.mockito.jupiter
    testImplementation libs.spring.boot.starter.test
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = "utf-8"
}

pmd {
    ruleSets = []
    ruleSetConfig = resources.text.fromFile("${rootDir}/config/pmd/pmd.xml")
    sourceSets = [sourceSets.main]
}

spotless {
    java {
        target 'src/main/java/**/*.java'
        importOrder()
        removeUnusedImports()
        googleJavaFormat("1.15.0")
                .reflowLongStrings()
                .groupArtifact('com.google.googlejavaformat:google-java-format')
    }
}

spotbugs {
    excludeFilter = file("${rootDir}/config/spotbugs/excludes.xml")
}

spotbugsMain {
    reports {
        html {
            required = true
        }
    }
}

test {
    finalizedBy jacocoTestReport
}

jar { enabled = true }

bootJar {
    enabled = true

    manifest {
        attributes 'Start-Class': "co.uk.stefanpuia.minilang2java.Application"
    }
}

springBoot {
    buildInfo {
        properties {
            version = "${System.env.VERSION}"
        }
    }
}

docker {
    springBootApplication {
        baseImage = 'openjdk:17'
        images = ["${System.env.DOCKER_IMAGE_TAG}", "${System.env.DOCKER_IMAGE_TAG}:${System.env.BUILD_ID}"]
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                minimum = 1.0
            }
            excludes = ['co.uk.stefanpuia.minilang2java.Application',
                        'co.uk.stefanpuia.minilang2java.config.ConversionServiceAdapter',
                        'co.uk.stefanpuia.minilang2java.config.ConvertBeans',
                        'co.uk.stefanpuia.minilang2java.config.MvcConfig',
                        'co.uk.stefanpuia.minilang2java.controller.dto.*',
                        'co.uk.stefanpuia.minilang2java.controller.ExceptionController',
                        'co.uk.stefanpuia.minilang2java.controller.mappers.ConvertRequestDtoToConversionConfigImpl',
                        'co.uk.stefanpuia.minilang2java.core.convert.context.DefaultConversionContext',
                        'co.uk.stefanpuia.minilang2java.core.convert.context.Message',
                        'co.uk.stefanpuia.minilang2java.core.convert.reader.PositionalParserHandler',
                        'co.uk.stefanpuia.minilang2java.core.handler.method.VariableHandler',
                        'co.uk.stefanpuia.minilang2java.core.model.ConversionInit',
                        'co.uk.stefanpuia.minilang2java.core.model.exception.*',
                        'co.uk.stefanpuia.minilang2java.core.model.LoggingConfig',
                        'co.uk.stefanpuia.minilang2java.core.TagFactory',
                        'co.uk.stefanpuia.minilang2java.core.validate.ValidationUtil',
                        'co.uk.stefanpuia.minilang2java.core.validate.ValidatorLoader',
                        'co.uk.stefanpuia.minilang2java.core.xml.impl.*',
                        'co.uk.stefanpuia.minilang2java.tag.root.XmlRoot',
                        'co.uk.stefanpuia.minilang2java.tag.TagLoader']
        }

        rule {
            element = 'CLASS'
            limit {
                minimum = 0.9
            }
            includes = ['co.uk.stefanpuia.minilang2java.controller.mappers.ConvertRequestDtoToConversionConfigImpl',
                        'co.uk.stefanpuia.minilang2java.core.convert.context.DefaultConversionContext',
                        'co.uk.stefanpuia.minilang2java.core.convert.context.Message',
                        'co.uk.stefanpuia.minilang2java.core.model.ConversionInit',
                        'co.uk.stefanpuia.minilang2java.tag.root.XmlRoot']
        }

        rule {
            element = 'CLASS'
            limit {
                minimum = 0.6
            }
            includes = ['co.uk.stefanpuia.minilang2java.controller.dto.ConvertResponseDto']
        }

        rule {
            element = 'CLASS'
            limit {
                minimum = 0.5
            }
            includes = ['co.uk.stefanpuia.minilang2java.core.model.LoggingConfig']
        }

        rule {
            element = 'CLASS'
            limit {
                minimum = 0.1
            }
            includes = ['co.uk.stefanpuia.minilang2java.core.xml.impl.AbstractElement']
        }
    }
}

spotbugsTest.enabled = false
check.dependsOn test
test.finalizedBy jacocoTestReport
jacocoTestCoverageVerification.dependsOn test
check.dependsOn jacocoTestCoverageVerification