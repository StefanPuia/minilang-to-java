plugins {
    id 'java'
    id 'pmd'
    id 'jacoco'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'com.github.spotbugs' version '5.2.5'
    id 'io.freefair.lombok' version '8.6'
    id 'org.springframework.boot' version '2.7.18'
    id 'com.bmuschko.docker-spring-boot-application' version '9.4.0'
    id 'com.asarkar.gradle.build-time-tracker' version '4.3.0'
}

group = 'co.uk.stefanpuia'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}


dependencies {
    annotationProcessor libs.immutables.value
    annotationProcessor libs.lombok.mapstruct.binding
    annotationProcessor libs.mapstruct.processor
    annotationProcessor libs.mapstruct.spring.processor
    annotationProcessor libs.spring.boot.configuration.processor
    developmentOnly libs.spring.boot.devtools
    implementation libs.bundles.immutables
    implementation libs.bundles.jackson
    implementation libs.commons.lang3
    implementation libs.mapstruct.core
    implementation libs.mapstruct.spring.core
    implementation libs.slf4j.api
    implementation libs.spotbugs.annotations
    implementation libs.spring.boot.starter.data.jpa
    implementation libs.spring.boot.starter.freemarker
    implementation libs.spring.boot.starter.validation
    implementation libs.spring.boot.starter.web
    testImplementation libs.assertj.core
    testImplementation libs.bundles.junit.jupiter
    testImplementation libs.mockito.jupiter
    testImplementation libs.spring.boot.starter.test
}

final String EXPORT_INTERNAL_DOM = "java.xml/com.sun.org.apache.xerces.internal.dom=ALL-UNNAMED"
compileJava {
    options.compilerArgs.add("--add-exports=${EXPORT_INTERNAL_DOM}")
}

compileTestJava {
    options.compilerArgs.add("--add-exports=${EXPORT_INTERNAL_DOM}")
}

bootRun {
    jvmArgs = ["--add-opens=${EXPORT_INTERNAL_DOM}",]
}

test {
    useJUnitPlatform()
    jvmArgs = ["--add-opens=${EXPORT_INTERNAL_DOM}",]
}

tasks.withType(JavaCompile) {
    options.encoding = "utf-8"
}

pmd {
    ruleSets = []
    ruleSetConfig = resources.text.fromFile("${rootDir}/config/pmd/pmd.xml")
    sourceSets = [sourceSets.main]
}

spotless {
    java {
        target 'src/main/java/**/*.java'
        importOrder()
        removeUnusedImports()
        googleJavaFormat("1.15.0")
                .reflowLongStrings()
                .groupArtifact('com.google.googlejavaformat:google-java-format')
    }
}

spotbugs {
    excludeFilter = file("${rootDir}/config/spotbugs/excludes.xml")
}

spotbugsMain {
    reports {
        html {
            required = true
        }
    }
}

test {
    finalizedBy jacocoTestReport
}

jar { enabled = true }

bootJar {
    enabled = true

    manifest {
        attributes 'Start-Class': "co.uk.stefanpuia.minilang2java.Application"
    }
}

springBoot {
    buildInfo {
        properties {
            version = "${System.env.VERSION}"
        }
    }
}

docker {
    springBootApplication {
        baseImage = 'openjdk:17'
        images = ["${System.env.DOCKER_IMAGE_TAG}", "${System.env.DOCKER_IMAGE_TAG}:${System.env.BUILD_ID}"]
        jvmArgs = ["--add-opens=${EXPORT_INTERNAL_DOM}", '-Dspring.profiles.active=production', '-Xms256m', '-Xmx256m']
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                minimum = 1.0
            }
            excludes = ['co.uk.stefanpuia.minilang2java.Application',
                        'co.uk.stefanpuia.minilang2java.config.ConversionServiceAdapter',
                        'co.uk.stefanpuia.minilang2java.config.ConvertBeans',
                        'co.uk.stefanpuia.minilang2java.config.MvcConfig',
                        'co.uk.stefanpuia.minilang2java.controller.dto.*',
                        'co.uk.stefanpuia.minilang2java.controller.ExceptionController',
                        'co.uk.stefanpuia.minilang2java.controller.mappers.ConvertRequestDtoToConversionConfigImpl',
                        'co.uk.stefanpuia.minilang2java.controller.MvcController',
                        'co.uk.stefanpuia.minilang2java.core.convert.context.DefaultConversionContext',
                        'co.uk.stefanpuia.minilang2java.core.convert.context.Message',
                        'co.uk.stefanpuia.minilang2java.core.convert.reader.PositionalParserHandler',
                        'co.uk.stefanpuia.minilang2java.core.convert.reader.SimpleMethodsXmlReader',
                        'co.uk.stefanpuia.minilang2java.core.handler.method.VariableHandler',
                        'co.uk.stefanpuia.minilang2java.core.model.ConversionInit',
                        'co.uk.stefanpuia.minilang2java.core.model.exception.*',
                        'co.uk.stefanpuia.minilang2java.core.model.LoggingConfig',
                        'co.uk.stefanpuia.minilang2java.core.model.MessageType.*',
                        'co.uk.stefanpuia.minilang2java.core.model.SimpleMethodsElement',
                        'co.uk.stefanpuia.minilang2java.core.model.VariableType',
                        'co.uk.stefanpuia.minilang2java.core.TagFactory',
                        'co.uk.stefanpuia.minilang2java.core.validate.Validation',
                        'co.uk.stefanpuia.minilang2java.core.validate.ValidatorLoader',
                        'co.uk.stefanpuia.minilang2java.tag.root.XmlRoot',
                        'co.uk.stefanpuia.minilang2java.tag.TagLoader',
                        // TODO
                        'co.uk.stefanpuia.minilang2java.core.convert.reader.PositionalXmlReader',
                        'co.uk.stefanpuia.minilang2java.core.validate.ParentTagNameValidator',
                        'co.uk.stefanpuia.minilang2java.core.validate.rule.ParentTagNameRule',
                        'co.uk.stefanpuia.minilang2java.core.handler.method.variable.*',
                        'co.uk.stefanpuia.minilang2java.tag.callop.*',
                        'co.uk.stefanpuia.minilang2java.tag.envop.Break',
                        'co.uk.stefanpuia.minilang2java.tag.envop.Continue',
                        'co.uk.stefanpuia.minilang2java.tag.envop.now.*',
                        'co.uk.stefanpuia.minilang2java.tag.ifop.*',
                        'co.uk.stefanpuia.minilang2java.tag.TagAttributes',
                        'co.uk.stefanpuia.minilang2java.util.*',]
        }

        rule {
            element = 'CLASS'
            limit {
                minimum = 0.9
            }
            includes = ['co.uk.stefanpuia.minilang2java.controller.mappers.ConvertRequestDtoToConversionConfigImpl',
                        'co.uk.stefanpuia.minilang2java.core.convert.context.DefaultConversionContext',
                        'co.uk.stefanpuia.minilang2java.core.convert.context.Message',
                        'co.uk.stefanpuia.minilang2java.core.model.ConversionInit',
                        'co.uk.stefanpuia.minilang2java.core.model.VariableType',
                        'co.uk.stefanpuia.minilang2java.tag.root.XmlRoot']
        }

        rule {
            element = 'CLASS'
            limit {
                minimum = 0.6
            }
            includes = ['co.uk.stefanpuia.minilang2java.controller.dto.ConvertResponseDto']
        }

        rule {
            element = 'CLASS'
            limit {
                minimum = 0.5
            }
            includes = ['co.uk.stefanpuia.minilang2java.core.model.LoggingConfig']
        }
    }
}

spotbugsTest.enabled = false
check.dependsOn test
test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification